# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type FavoriteShow implements Node {
  id: ID!
  tvmaze: Int!
  tvrage: Int
  thetvdb: Int
  imdb: String
  user(where: UserWhereInput): User
}

type User implements Node {
  id: ID!
  email: String!
  role: Role!
  name: String
  avatar: String
  auth0id: String!
  identity: String
  favoriteShows(where: FavoriteShowWhereInput, orderBy: FavoriteShowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FavoriteShow!]
}


#
# Other Types
#

type AggregateFavoriteShow {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type FavoriteShowConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FavoriteShowEdge]!
  aggregate: AggregateFavoriteShow!
}

input FavoriteShowCreateInput {
  tvmaze: Int!
  tvrage: Int
  thetvdb: Int
  imdb: String
  user: UserCreateOneWithoutFavoriteShowsInput
}

input FavoriteShowCreateManyWithoutUserInput {
  create: [FavoriteShowCreateWithoutUserInput!]
  connect: [FavoriteShowWhereUniqueInput!]
}

input FavoriteShowCreateWithoutUserInput {
  tvmaze: Int!
  tvrage: Int
  thetvdb: Int
  imdb: String
}

"""
An edge in a connection.
"""
type FavoriteShowEdge {
  """
  The item at the end of the edge.
  """
  node: FavoriteShow!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FavoriteShowOrderByInput {
  id_ASC
  id_DESC
  tvmaze_ASC
  tvmaze_DESC
  tvrage_ASC
  tvrage_DESC
  thetvdb_ASC
  thetvdb_DESC
  imdb_ASC
  imdb_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FavoriteShowPreviousValues {
  id: ID!
  tvmaze: Int!
  tvrage: Int
  thetvdb: Int
  imdb: String
}

type FavoriteShowSubscriptionPayload {
  mutation: MutationType!
  node: FavoriteShow
  updatedFields: [String!]
  previousValues: FavoriteShowPreviousValues
}

input FavoriteShowSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FavoriteShowSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FavoriteShowSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FavoriteShowWhereInput
}

input FavoriteShowUpdateInput {
  tvmaze: Int
  tvrage: Int
  thetvdb: Int
  imdb: String
  user: UserUpdateOneWithoutFavoriteShowsInput
}

input FavoriteShowUpdateManyWithoutUserInput {
  create: [FavoriteShowCreateWithoutUserInput!]
  connect: [FavoriteShowWhereUniqueInput!]
  disconnect: [FavoriteShowWhereUniqueInput!]
  delete: [FavoriteShowWhereUniqueInput!]
  update: [FavoriteShowUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [FavoriteShowUpsertWithWhereUniqueWithoutUserInput!]
}

input FavoriteShowUpdateWithoutUserDataInput {
  tvmaze: Int
  tvrage: Int
  thetvdb: Int
  imdb: String
}

input FavoriteShowUpdateWithWhereUniqueWithoutUserInput {
  where: FavoriteShowWhereUniqueInput!
  data: FavoriteShowUpdateWithoutUserDataInput!
}

input FavoriteShowUpsertWithWhereUniqueWithoutUserInput {
  where: FavoriteShowWhereUniqueInput!
  update: FavoriteShowUpdateWithoutUserDataInput!
  create: FavoriteShowCreateWithoutUserInput!
}

input FavoriteShowWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FavoriteShowWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FavoriteShowWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  tvmaze: Int
  """
  All values that are not equal to given value.
  """
  tvmaze_not: Int
  """
  All values that are contained in given list.
  """
  tvmaze_in: [Int!]
  """
  All values that are not contained in given list.
  """
  tvmaze_not_in: [Int!]
  """
  All values less than the given value.
  """
  tvmaze_lt: Int
  """
  All values less than or equal the given value.
  """
  tvmaze_lte: Int
  """
  All values greater than the given value.
  """
  tvmaze_gt: Int
  """
  All values greater than or equal the given value.
  """
  tvmaze_gte: Int
  tvrage: Int
  """
  All values that are not equal to given value.
  """
  tvrage_not: Int
  """
  All values that are contained in given list.
  """
  tvrage_in: [Int!]
  """
  All values that are not contained in given list.
  """
  tvrage_not_in: [Int!]
  """
  All values less than the given value.
  """
  tvrage_lt: Int
  """
  All values less than or equal the given value.
  """
  tvrage_lte: Int
  """
  All values greater than the given value.
  """
  tvrage_gt: Int
  """
  All values greater than or equal the given value.
  """
  tvrage_gte: Int
  thetvdb: Int
  """
  All values that are not equal to given value.
  """
  thetvdb_not: Int
  """
  All values that are contained in given list.
  """
  thetvdb_in: [Int!]
  """
  All values that are not contained in given list.
  """
  thetvdb_not_in: [Int!]
  """
  All values less than the given value.
  """
  thetvdb_lt: Int
  """
  All values less than or equal the given value.
  """
  thetvdb_lte: Int
  """
  All values greater than the given value.
  """
  thetvdb_gt: Int
  """
  All values greater than or equal the given value.
  """
  thetvdb_gte: Int
  imdb: String
  """
  All values that are not equal to given value.
  """
  imdb_not: String
  """
  All values that are contained in given list.
  """
  imdb_in: [String!]
  """
  All values that are not contained in given list.
  """
  imdb_not_in: [String!]
  """
  All values less than the given value.
  """
  imdb_lt: String
  """
  All values less than or equal the given value.
  """
  imdb_lte: String
  """
  All values greater than the given value.
  """
  imdb_gt: String
  """
  All values greater than or equal the given value.
  """
  imdb_gte: String
  """
  All values containing the given string.
  """
  imdb_contains: String
  """
  All values not containing the given string.
  """
  imdb_not_contains: String
  """
  All values starting with the given string.
  """
  imdb_starts_with: String
  """
  All values not starting with the given string.
  """
  imdb_not_starts_with: String
  """
  All values ending with the given string.
  """
  imdb_ends_with: String
  """
  All values not ending with the given string.
  """
  imdb_not_ends_with: String
  user: UserWhereInput
}

input FavoriteShowWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createFavoriteShow(data: FavoriteShowCreateInput!): FavoriteShow!
  createUser(data: UserCreateInput!): User!
  updateFavoriteShow(data: FavoriteShowUpdateInput!, where: FavoriteShowWhereUniqueInput!): FavoriteShow
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteFavoriteShow(where: FavoriteShowWhereUniqueInput!): FavoriteShow
  deleteUser(where: UserWhereUniqueInput!): User
  upsertFavoriteShow(where: FavoriteShowWhereUniqueInput!, create: FavoriteShowCreateInput!, update: FavoriteShowUpdateInput!): FavoriteShow!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyFavoriteShows(data: FavoriteShowUpdateInput!, where: FavoriteShowWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyFavoriteShows(where: FavoriteShowWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  favoriteShows(where: FavoriteShowWhereInput, orderBy: FavoriteShowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FavoriteShow]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  favoriteShow(where: FavoriteShowWhereUniqueInput!): FavoriteShow
  user(where: UserWhereUniqueInput!): User
  favoriteShowsConnection(where: FavoriteShowWhereInput, orderBy: FavoriteShowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FavoriteShowConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

enum Role {
  ADMIN
  USER
}

type Subscription {
  favoriteShow(where: FavoriteShowSubscriptionWhereInput): FavoriteShowSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  role: Role
  name: String
  avatar: String
  auth0id: String!
  identity: String
  favoriteShows: FavoriteShowCreateManyWithoutUserInput
}

input UserCreateOneWithoutFavoriteShowsInput {
  create: UserCreateWithoutFavoriteShowsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFavoriteShowsInput {
  email: String!
  role: Role
  name: String
  avatar: String
  auth0id: String!
  identity: String
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
  auth0id_ASC
  auth0id_DESC
  identity_ASC
  identity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  role: Role!
  name: String
  avatar: String
  auth0id: String!
  identity: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  role: Role
  name: String
  avatar: String
  auth0id: String
  identity: String
  favoriteShows: FavoriteShowUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutFavoriteShowsInput {
  create: UserCreateWithoutFavoriteShowsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutFavoriteShowsDataInput
  upsert: UserUpsertWithoutFavoriteShowsInput
}

input UserUpdateWithoutFavoriteShowsDataInput {
  email: String
  role: Role
  name: String
  avatar: String
  auth0id: String
  identity: String
}

input UserUpsertWithoutFavoriteShowsInput {
  update: UserUpdateWithoutFavoriteShowsDataInput!
  create: UserCreateWithoutFavoriteShowsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  role: Role
  """
  All values that are not equal to given value.
  """
  role_not: Role
  """
  All values that are contained in given list.
  """
  role_in: [Role!]
  """
  All values that are not contained in given list.
  """
  role_not_in: [Role!]
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  avatar: String
  """
  All values that are not equal to given value.
  """
  avatar_not: String
  """
  All values that are contained in given list.
  """
  avatar_in: [String!]
  """
  All values that are not contained in given list.
  """
  avatar_not_in: [String!]
  """
  All values less than the given value.
  """
  avatar_lt: String
  """
  All values less than or equal the given value.
  """
  avatar_lte: String
  """
  All values greater than the given value.
  """
  avatar_gt: String
  """
  All values greater than or equal the given value.
  """
  avatar_gte: String
  """
  All values containing the given string.
  """
  avatar_contains: String
  """
  All values not containing the given string.
  """
  avatar_not_contains: String
  """
  All values starting with the given string.
  """
  avatar_starts_with: String
  """
  All values not starting with the given string.
  """
  avatar_not_starts_with: String
  """
  All values ending with the given string.
  """
  avatar_ends_with: String
  """
  All values not ending with the given string.
  """
  avatar_not_ends_with: String
  auth0id: String
  """
  All values that are not equal to given value.
  """
  auth0id_not: String
  """
  All values that are contained in given list.
  """
  auth0id_in: [String!]
  """
  All values that are not contained in given list.
  """
  auth0id_not_in: [String!]
  """
  All values less than the given value.
  """
  auth0id_lt: String
  """
  All values less than or equal the given value.
  """
  auth0id_lte: String
  """
  All values greater than the given value.
  """
  auth0id_gt: String
  """
  All values greater than or equal the given value.
  """
  auth0id_gte: String
  """
  All values containing the given string.
  """
  auth0id_contains: String
  """
  All values not containing the given string.
  """
  auth0id_not_contains: String
  """
  All values starting with the given string.
  """
  auth0id_starts_with: String
  """
  All values not starting with the given string.
  """
  auth0id_not_starts_with: String
  """
  All values ending with the given string.
  """
  auth0id_ends_with: String
  """
  All values not ending with the given string.
  """
  auth0id_not_ends_with: String
  identity: String
  """
  All values that are not equal to given value.
  """
  identity_not: String
  """
  All values that are contained in given list.
  """
  identity_in: [String!]
  """
  All values that are not contained in given list.
  """
  identity_not_in: [String!]
  """
  All values less than the given value.
  """
  identity_lt: String
  """
  All values less than or equal the given value.
  """
  identity_lte: String
  """
  All values greater than the given value.
  """
  identity_gt: String
  """
  All values greater than or equal the given value.
  """
  identity_gte: String
  """
  All values containing the given string.
  """
  identity_contains: String
  """
  All values not containing the given string.
  """
  identity_not_contains: String
  """
  All values starting with the given string.
  """
  identity_starts_with: String
  """
  All values not starting with the given string.
  """
  identity_not_starts_with: String
  """
  All values ending with the given string.
  """
  identity_ends_with: String
  """
  All values not ending with the given string.
  """
  identity_not_ends_with: String
  favoriteShows_every: FavoriteShowWhereInput
  favoriteShows_some: FavoriteShowWhereInput
  favoriteShows_none: FavoriteShowWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  auth0id: String
}
